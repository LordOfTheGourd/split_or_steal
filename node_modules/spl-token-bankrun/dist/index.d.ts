import { Signer, PublicKey, Keypair, Commitment, ConfirmOptions } from "@solana/web3.js";
import * as token from "@solana/spl-token";
import { BanksClient, BanksTransactionMeta, ProgramTestContext } from "solana-bankrun";
export declare function createMint(banksClient: BanksClient, payer: Keypair, mintAuthority: PublicKey, freezeAuthority: PublicKey | null, decimals: number, keypair?: Keypair, programId?: PublicKey): Promise<PublicKey>;
export declare function createAccount(banksClient: BanksClient, payer: Signer, mint: PublicKey, owner: PublicKey, keypair?: Keypair, confirmOptions?: ConfirmOptions, programId?: PublicKey): Promise<PublicKey>;
export declare function createAssociatedTokenAccount(banksClient: BanksClient, payer: Signer, mint: PublicKey, owner: PublicKey, programId?: PublicKey, associatedTokenProgramId?: PublicKey): Promise<PublicKey>;
export declare function getMint(banksClient: BanksClient, address: PublicKey, commitment?: Commitment, programId?: PublicKey): Promise<token.Mint>;
export declare function mintToOverride(context: ProgramTestContext, destination: PublicKey, amount: bigint): Promise<void>;
export declare function mintTo(banksClient: BanksClient, payer: Signer, mint: PublicKey, destination: PublicKey, authority: Signer | PublicKey, amount: number | bigint, multiSigners?: Signer[], programId?: PublicKey): Promise<BanksTransactionMeta>;
export declare function getSigners(signerOrMultisig: Signer | PublicKey, multiSigners: Signer[]): [PublicKey, Signer[]];
export declare function getAccount(banksClient: BanksClient, address: PublicKey, commitment?: Commitment, programId?: PublicKey): Promise<token.Account>;
